import { Instance } from "./instance.js";
import { BackendApi, Storage, Querier } from "./backend.js";
export declare function doDbRead<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, keyPtr: number): number;
export declare function doDbWrite<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, keyPtr: number, valuePtr: number): void;
export declare function doDbRemove<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, keyPtr: number): void;
export declare function doAddrValidate<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, sourcePtr: number): number;
export declare function doAddrCanonicalize<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, sourcePtr: number, destinationPtr: number): number;
export declare function doAddrHumanize<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, sourcePtr: number, destinationPtr: number): number;
export declare function doSecp256k1Verify<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, hashPtr: number, signaturePtr: number, pubkeyPtr: number): number;
export declare function doSecp256k1RecoverPubkey<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, hashPtr: number, signaturePtr: number, recoverParam: number): number;
export declare function doEd25519Verify<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, messagePtr: number, signaturePtr: number, pubkeyPtr: number): number;
export declare function doEd25519BatchVerify<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, messagesPtr: number, signaturesPtr: number, publicKeysPtr: number): number;
export declare function doDebug<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, messagePtr: number): void;
export declare function doAbort<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, messagePtr: number): void;
export declare function doQueryChain<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, requestPtr: number): number;
export declare function doDbScan<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, startPtr: number, endPtr: number, order: number): number;
export declare function doDbNext<A extends BackendApi, S extends Storage, Q extends Querier>(instance: Instance<A, S, Q>, iteratorId: number): number;
